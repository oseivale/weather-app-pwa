{"ast":null,"code":"var _jsxFileName = \"/Users/weather-app-pwa/frontend/src/Weather.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Container, Row, Col, Form, Button, Card, Alert } from \"react-bootstrap\";\nimport { getUserLocation } from \"./utils\";\nimport { handleSubscriptionRequest } from \"./services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Weather = () => {\n  _s();\n  const [city, setCity] = useState(\"\");\n  const [weather, setWeather] = useState(null);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState('');\n\n  // Function to convert VAPID key from URL safe base64 to Uint8Array\n  function urlBase64ToUint8Array(base64String) {\n    const padding = \"=\".repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding).replace(/-/g, \"+\").replace(/_/g, \"/\");\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n    for (let i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n  }\n  const publicVapidKey = process.env.REACT_APP_PUBLIC_VAPID_KEY; // Ensure this is set in your environment variables\n\n  // const subscribeUser = async () => {\n  //     if ('serviceWorker' in navigator) {\n  //         try {\n  //             const registration = await navigator.serviceWorker.ready;\n  //             const subscription = await registration.pushManager.subscribe({\n  //                 userVisibleOnly: true,\n  //                 applicationServerKey: urlBase64ToUint8Array(publicVapidKey)\n  //             });\n  //             await fetch('/subscribe', {\n  //                 method: 'POST',\n  //                 body: JSON.stringify(subscription),\n  //                 headers: {\n  //                     'Content-Type': 'application/json'\n  //                 }\n  //             });\n  //             alert(\"Subscribed!\");\n  //         } catch (error) {\n  //             console.error('Error subscribing to notifications:', error);\n  //             setError('Failed to subscribe to notifications.');\n  //         }\n  //     }\n  // };\n\n  async function subscribeUserToPush() {\n    try {\n      const location = await getUserLocation();\n      const registration = await navigator.serviceWorker.ready;\n      const subscription = await registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: urlBase64ToUint8Array(publicVapidKey)\n      });\n      const response = await handleSubscriptionRequest(subscription, {\n        lat: location.coords.latitude,\n        lon: location.coords.longitude\n      });\n      if (response.status === \"success\") {\n        console.log('--response--', response);\n        setStatus(\"Subscribed successfully!\");\n      }\n    } catch (error) {\n      console.error(\"Error subscribing:\", error);\n      setStatus(\"Failed to subscribe.\");\n    }\n  }\n  const handleInputChange = e => {\n    setCity(e.target.value);\n  };\n  const fetchWeather = async e => {\n    e.preventDefault();\n    setError(null); // Clear previous errors\n    try {\n      const apiKey = process.env.REACT_APP_OPENWEATHER_API_KEY;\n      const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`;\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch weather data\");\n      }\n      const data = await response.json();\n      setWeather(data);\n    } catch (error) {\n      console.error(\"Error fetching weather data:\", error);\n      setError(error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"p-3\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-md-center\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        xs: 12,\n        md: 6,\n        children: [/*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: fetchWeather,\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"cityName\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Enter city name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: \"City name\",\n              value: city,\n              onChange: handleInputChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            type: \"submit\",\n            children: \"Get Weather\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: subscribeUserToPush,\n            className: \"ml-2\",\n            children: \"Subscribe for Notifications\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n          variant: \"danger\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), weather && /*#__PURE__*/_jsxDEV(Card, {\n          className: \"mt-3\",\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n              children: weather.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: [\"Temperature: \", weather.main.temp, \" \\xB0C\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 19\n              }, this), \"Weather: \", weather.weather[0].description, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 19\n              }, this), \"Humidity: \", weather.main.humidity, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(Weather, \"zci4WVyJvLXNo3fnfxZFCXy3JXk=\");\n_c = Weather;\nexport default Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useState","Container","Row","Col","Form","Button","Card","Alert","getUserLocation","handleSubscriptionRequest","jsxDEV","_jsxDEV","Weather","_s","city","setCity","weather","setWeather","error","setError","status","setStatus","urlBase64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","publicVapidKey","process","env","REACT_APP_PUBLIC_VAPID_KEY","subscribeUserToPush","location","registration","navigator","serviceWorker","ready","subscription","pushManager","subscribe","userVisibleOnly","applicationServerKey","response","lat","coords","latitude","lon","longitude","console","log","handleInputChange","e","target","value","fetchWeather","preventDefault","apiKey","REACT_APP_OPENWEATHER_API_KEY","url","fetch","ok","Error","data","json","message","className","children","xs","md","onSubmit","Group","controlId","Label","fileName","_jsxFileName","lineNumber","columnNumber","Control","type","placeholder","onChange","variant","onClick","Body","Title","name","Text","main","temp","description","humidity","_c","$RefreshReg$"],"sources":["/Users/weather-app-pwa/frontend/src/Weather.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  Button,\n  Card,\n  Alert,\n} from \"react-bootstrap\";\nimport { getUserLocation } from \"./utils\";\nimport { handleSubscriptionRequest } from \"./services/api\";\n\nconst Weather = () => {\n  const [city, setCity] = useState(\"\");\n  const [weather, setWeather] = useState(null);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState('');\n\n\n  // Function to convert VAPID key from URL safe base64 to Uint8Array\n  function urlBase64ToUint8Array(base64String) {\n    const padding = \"=\".repeat((4 - (base64String.length % 4)) % 4);\n    const base64 = (base64String + padding)\n      .replace(/-/g, \"+\")\n      .replace(/_/g, \"/\");\n\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n\n    for (let i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n  }\n\n  const publicVapidKey = process.env.REACT_APP_PUBLIC_VAPID_KEY; // Ensure this is set in your environment variables\n\n  // const subscribeUser = async () => {\n  //     if ('serviceWorker' in navigator) {\n  //         try {\n  //             const registration = await navigator.serviceWorker.ready;\n  //             const subscription = await registration.pushManager.subscribe({\n  //                 userVisibleOnly: true,\n  //                 applicationServerKey: urlBase64ToUint8Array(publicVapidKey)\n  //             });\n  //             await fetch('/subscribe', {\n  //                 method: 'POST',\n  //                 body: JSON.stringify(subscription),\n  //                 headers: {\n  //                     'Content-Type': 'application/json'\n  //                 }\n  //             });\n  //             alert(\"Subscribed!\");\n  //         } catch (error) {\n  //             console.error('Error subscribing to notifications:', error);\n  //             setError('Failed to subscribe to notifications.');\n  //         }\n  //     }\n  // };\n\n  async function subscribeUserToPush() {\n    try {\n      const location = await getUserLocation();\n      const registration = await navigator.serviceWorker.ready;\n      const subscription = await registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: urlBase64ToUint8Array(publicVapidKey),\n      });\n      const response = await handleSubscriptionRequest(subscription, {\n        lat: location.coords.latitude,\n        lon: location.coords.longitude,\n      });\n\n\n      if (response.status === \"success\") {\n        console.log('--response--', response)\n        setStatus(\"Subscribed successfully!\");\n      }\n    } catch (error) {\n      console.error(\"Error subscribing:\", error);\n      setStatus(\"Failed to subscribe.\");\n    }\n  }\n\n  const handleInputChange = (e) => {\n    setCity(e.target.value);\n  };\n\n  const fetchWeather = async (e) => {\n    e.preventDefault();\n    setError(null); // Clear previous errors\n    try {\n      const apiKey = process.env.REACT_APP_OPENWEATHER_API_KEY;\n      const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`;\n      const response = await fetch(url);\n\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch weather data\");\n      }\n\n      const data = await response.json();\n      setWeather(data);\n    } catch (error) {\n      console.error(\"Error fetching weather data:\", error);\n      setError(error.message);\n    }\n  };\n\n  return (\n    <Container className=\"p-3\">\n      <Row className=\"justify-content-md-center\">\n        <Col xs={12} md={6}>\n          <Form onSubmit={fetchWeather}>\n            <Form.Group controlId=\"cityName\">\n              <Form.Label>Enter city name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"City name\"\n                value={city}\n                onChange={handleInputChange}\n              />\n            </Form.Group>\n            <Button variant=\"primary\" type=\"submit\">\n              Get Weather\n            </Button>\n            <Button\n              variant=\"secondary\"\n              onClick={subscribeUserToPush}\n              className=\"ml-2\"\n            >\n              Subscribe for Notifications\n            </Button>\n          </Form>\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          {weather && (\n            <Card className=\"mt-3\">\n              <Card.Body>\n                <Card.Title>{weather.name}</Card.Title>\n                <Card.Text>\n                  Temperature: {weather.main.temp} °C\n                  <br />\n                  Weather: {weather.weather[0].description}\n                  <br />\n                  Humidity: {weather.main.humidity}%\n                </Card.Text>\n              </Card.Body>\n            </Card>\n          )}\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Weather;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}